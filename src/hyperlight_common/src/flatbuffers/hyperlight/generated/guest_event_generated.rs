// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;

use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GuestEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GuestEvent<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GuestEvent<'a> {
    type Inner = GuestEvent<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> GuestEvent<'a> {
    pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_EVENT: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        GuestEvent { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args GuestEventArgs,
    ) -> flatbuffers::WIPOffset<GuestEvent<'bldr>> {
        let mut builder = GuestEventBuilder::new(_fbb);
        if let Some(x) = args.event {
            builder.add_event(x);
        }
        builder.add_event_type(args.event_type);
        builder.finish()
    }

    #[inline]
    pub fn event_type(&self) -> GuestEventType {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<GuestEventType>(GuestEvent::VT_EVENT_TYPE, Some(GuestEventType::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn event(&self) -> Option<flatbuffers::Table<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    GuestEvent::VT_EVENT,
                    None,
                )
        }
    }
    #[inline]
    #[allow(non_snake_case)]
    pub fn event_as_open_span_type(&self) -> Option<OpenSpanType<'a>> {
        if self.event_type() == GuestEventType::OpenSpanType {
            self.event().map(|t| {
                // Safety:
                // Created from a valid Table for this object
                // Which contains a valid union in this slot
                unsafe { OpenSpanType::init_from_table(t) }
            })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn event_as_close_span_type(&self) -> Option<CloseSpanType<'a>> {
        if self.event_type() == GuestEventType::CloseSpanType {
            self.event().map(|t| {
                // Safety:
                // Created from a valid Table for this object
                // Which contains a valid union in this slot
                unsafe { CloseSpanType::init_from_table(t) }
            })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn event_as_log_event_type(&self) -> Option<LogEventType<'a>> {
        if self.event_type() == GuestEventType::LogEventType {
            self.event().map(|t| {
                // Safety:
                // Created from a valid Table for this object
                // Which contains a valid union in this slot
                unsafe { LogEventType::init_from_table(t) }
            })
        } else {
            None
        }
    }
}

impl flatbuffers::Verifiable for GuestEvent<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_union::<GuestEventType, _>(
                "event_type",
                Self::VT_EVENT_TYPE,
                "event",
                Self::VT_EVENT,
                false,
                |key, v, pos| match key {
                    GuestEventType::OpenSpanType => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<OpenSpanType>>(
                            "GuestEventType::OpenSpanType",
                            pos,
                        ),
                    GuestEventType::CloseSpanType => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<CloseSpanType>>(
                            "GuestEventType::CloseSpanType",
                            pos,
                        ),
                    GuestEventType::LogEventType => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<LogEventType>>(
                            "GuestEventType::LogEventType",
                            pos,
                        ),
                    _ => Ok(()),
                },
            )?
            .finish();
        Ok(())
    }
}
pub struct GuestEventArgs {
    pub event_type: GuestEventType,
    pub event: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GuestEventArgs {
    #[inline]
    fn default() -> Self {
        GuestEventArgs {
            event_type: GuestEventType::NONE,
            event: None,
        }
    }
}

pub struct GuestEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GuestEventBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_event_type(&mut self, event_type: GuestEventType) {
        self.fbb_.push_slot::<GuestEventType>(
            GuestEvent::VT_EVENT_TYPE,
            event_type,
            GuestEventType::NONE,
        );
    }
    #[inline]
    pub fn add_event(&mut self, event: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(GuestEvent::VT_EVENT, event);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> GuestEventBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        GuestEventBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<GuestEvent<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for GuestEvent<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("GuestEvent");
        ds.field("event_type", &self.event_type());
        match self.event_type() {
            GuestEventType::OpenSpanType => {
                if let Some(x) = self.event_as_open_span_type() {
                    ds.field("event", &x)
                } else {
                    ds.field(
                        "event",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            GuestEventType::CloseSpanType => {
                if let Some(x) = self.event_as_close_span_type() {
                    ds.field("event", &x)
                } else {
                    ds.field(
                        "event",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            GuestEventType::LogEventType => {
                if let Some(x) = self.event_as_log_event_type() {
                    ds.field("event", &x)
                } else {
                    ds.field(
                        "event",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            _ => {
                let x: Option<()> = None;
                ds.field("event", &x)
            }
        };
        ds.finish()
    }
}
