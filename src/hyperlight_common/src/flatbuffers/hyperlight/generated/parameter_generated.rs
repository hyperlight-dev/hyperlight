// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;

use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ParameterOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Parameter<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Parameter<'a> {
    type Inner = Parameter<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> Parameter<'a> {
    pub const VT_VALUE_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_VALUE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Parameter { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args ParameterArgs,
    ) -> flatbuffers::WIPOffset<Parameter<'bldr>> {
        let mut builder = ParameterBuilder::new(_fbb);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        builder.add_value_type(args.value_type);
        builder.finish()
    }

    #[inline]
    pub fn value_type(&self) -> ParameterValue {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ParameterValue>(Parameter::VT_VALUE_TYPE, Some(ParameterValue::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn value(&self) -> flatbuffers::Table<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    Parameter::VT_VALUE,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlint(&self) -> Option<hlint<'a>> {
        if self.value_type() == ParameterValue::hlint {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlint::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hluint(&self) -> Option<hluint<'a>> {
        if self.value_type() == ParameterValue::hluint {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hluint::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hllong(&self) -> Option<hllong<'a>> {
        if self.value_type() == ParameterValue::hllong {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hllong::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlulong(&self) -> Option<hlulong<'a>> {
        if self.value_type() == ParameterValue::hlulong {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlulong::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlfloat(&self) -> Option<hlfloat<'a>> {
        if self.value_type() == ParameterValue::hlfloat {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlfloat::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hldouble(&self) -> Option<hldouble<'a>> {
        if self.value_type() == ParameterValue::hldouble {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hldouble::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlstring(&self) -> Option<hlstring<'a>> {
        if self.value_type() == ParameterValue::hlstring {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlstring::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlbool(&self) -> Option<hlbool<'a>> {
        if self.value_type() == ParameterValue::hlbool {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlbool::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlvecbytes(&self) -> Option<hlvecbytes<'a>> {
        if self.value_type() == ParameterValue::hlvecbytes {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlvecbytes::init_from_table(u) })
        } else {
            None
        }
    }
}

impl flatbuffers::Verifiable for Parameter<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_union::<ParameterValue, _>(
                "value_type",
                Self::VT_VALUE_TYPE,
                "value",
                Self::VT_VALUE,
                true,
                |key, v, pos| match key {
                    ParameterValue::hlint => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlint>>(
                            "ParameterValue::hlint",
                            pos,
                        ),
                    ParameterValue::hluint => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hluint>>(
                            "ParameterValue::hluint",
                            pos,
                        ),
                    ParameterValue::hllong => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hllong>>(
                            "ParameterValue::hllong",
                            pos,
                        ),
                    ParameterValue::hlulong => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlulong>>(
                            "ParameterValue::hlulong",
                            pos,
                        ),
                    ParameterValue::hlfloat => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlfloat>>(
                            "ParameterValue::hlfloat",
                            pos,
                        ),
                    ParameterValue::hldouble => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hldouble>>(
                            "ParameterValue::hldouble",
                            pos,
                        ),
                    ParameterValue::hlstring => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlstring>>(
                            "ParameterValue::hlstring",
                            pos,
                        ),
                    ParameterValue::hlbool => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlbool>>(
                            "ParameterValue::hlbool",
                            pos,
                        ),
                    ParameterValue::hlvecbytes => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlvecbytes>>(
                            "ParameterValue::hlvecbytes",
                            pos,
                        ),
                    _ => Ok(()),
                },
            )?
            .finish();
        Ok(())
    }
}
pub struct ParameterArgs {
    pub value_type: ParameterValue,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ParameterArgs {
    #[inline]
    fn default() -> Self {
        ParameterArgs {
            value_type: ParameterValue::NONE,
            value: None, // required field
        }
    }
}

pub struct ParameterBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ParameterBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_value_type(&mut self, value_type: ParameterValue) {
        self.fbb_.push_slot::<ParameterValue>(
            Parameter::VT_VALUE_TYPE,
            value_type,
            ParameterValue::NONE,
        );
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Parameter::VT_VALUE, value);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ParameterBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        ParameterBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Parameter<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, Parameter::VT_VALUE, "value");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for Parameter<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("Parameter");
        ds.field("value_type", &self.value_type());
        match self.value_type() {
            ParameterValue::hlint => {
                if let Some(x) = self.value_as_hlint() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hluint => {
                if let Some(x) = self.value_as_hluint() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hllong => {
                if let Some(x) = self.value_as_hllong() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hlulong => {
                if let Some(x) = self.value_as_hlulong() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hlfloat => {
                if let Some(x) = self.value_as_hlfloat() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hldouble => {
                if let Some(x) = self.value_as_hldouble() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hlstring => {
                if let Some(x) = self.value_as_hlstring() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hlbool => {
                if let Some(x) = self.value_as_hlbool() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ParameterValue::hlvecbytes => {
                if let Some(x) = self.value_as_hlvecbytes() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            _ => {
                let x: Option<()> = None;
                ds.field("value", &x)
            }
        };
        ds.finish()
    }
}
