// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;

use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum OpenSpanTypeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OpenSpanType<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OpenSpanType<'a> {
    type Inner = OpenSpanType<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> OpenSpanType<'a> {
    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_PARENT: flatbuffers::VOffsetT = 6;
    pub const VT_NAME: flatbuffers::VOffsetT = 8;
    pub const VT_TARGET: flatbuffers::VOffsetT = 10;
    pub const VT_TSC: flatbuffers::VOffsetT = 12;
    pub const VT_FIELDS: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        OpenSpanType { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args OpenSpanTypeArgs<'args>,
    ) -> flatbuffers::WIPOffset<OpenSpanType<'bldr>> {
        let mut builder = OpenSpanTypeBuilder::new(_fbb);
        builder.add_tsc(args.tsc);
        if let Some(x) = args.parent {
            builder.add_parent(x);
        }
        builder.add_id(args.id);
        if let Some(x) = args.fields {
            builder.add_fields(x);
        }
        if let Some(x) = args.target {
            builder.add_target(x);
        }
        if let Some(x) = args.name {
            builder.add_name(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn id(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(OpenSpanType::VT_ID, Some(0)).unwrap() }
    }
    #[inline]
    pub fn parent(&self) -> Option<u64> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(OpenSpanType::VT_PARENT, None) }
    }
    #[inline]
    pub fn name(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(OpenSpanType::VT_NAME, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn target(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(OpenSpanType::VT_TARGET, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn tsc(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(OpenSpanType::VT_TSC, Some(0)).unwrap() }
    }
    #[inline]
    pub fn fields(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue>>,
            >>(OpenSpanType::VT_FIELDS, None)
        }
    }
}

impl flatbuffers::Verifiable for OpenSpanType<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>("id", Self::VT_ID, false)?
            .visit_field::<u64>("parent", Self::VT_PARENT, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("target", Self::VT_TARGET, true)?
            .visit_field::<u64>("tsc", Self::VT_TSC, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<KeyValue>>,
            >>("fields", Self::VT_FIELDS, false)?
            .finish();
        Ok(())
    }
}
pub struct OpenSpanTypeArgs<'a> {
    pub id: u64,
    pub parent: Option<u64>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub target: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tsc: u64,
    pub fields: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<KeyValue<'a>>>>,
    >,
}
impl<'a> Default for OpenSpanTypeArgs<'a> {
    #[inline]
    fn default() -> Self {
        OpenSpanTypeArgs {
            id: 0,
            parent: None,
            name: None,   // required field
            target: None, // required field
            tsc: 0,
            fields: None,
        }
    }
}

pub struct OpenSpanTypeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OpenSpanTypeBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_id(&mut self, id: u64) {
        self.fbb_.push_slot::<u64>(OpenSpanType::VT_ID, id, 0);
    }
    #[inline]
    pub fn add_parent(&mut self, parent: u64) {
        self.fbb_
            .push_slot_always::<u64>(OpenSpanType::VT_PARENT, parent);
    }
    #[inline]
    pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(OpenSpanType::VT_NAME, name);
    }
    #[inline]
    pub fn add_target(&mut self, target: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(OpenSpanType::VT_TARGET, target);
    }
    #[inline]
    pub fn add_tsc(&mut self, tsc: u64) {
        self.fbb_.push_slot::<u64>(OpenSpanType::VT_TSC, tsc, 0);
    }
    #[inline]
    pub fn add_fields(
        &mut self,
        fields: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<KeyValue<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(OpenSpanType::VT_FIELDS, fields);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> OpenSpanTypeBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        OpenSpanTypeBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<OpenSpanType<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, OpenSpanType::VT_NAME, "name");
        self.fbb_.required(o, OpenSpanType::VT_TARGET, "target");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for OpenSpanType<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("OpenSpanType");
        ds.field("id", &self.id());
        ds.field("parent", &self.parent());
        ds.field("name", &self.name());
        ds.field("target", &self.target());
        ds.field("tsc", &self.tsc());
        ds.field("fields", &self.fields());
        ds.finish()
    }
}
