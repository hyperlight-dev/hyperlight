// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;

use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReturnValueBoxOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ReturnValueBox<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ReturnValueBox<'a> {
    type Inner = ReturnValueBox<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> ReturnValueBox<'a> {
    pub const VT_VALUE_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_VALUE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ReturnValueBox { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args ReturnValueBoxArgs,
    ) -> flatbuffers::WIPOffset<ReturnValueBox<'bldr>> {
        let mut builder = ReturnValueBoxBuilder::new(_fbb);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        builder.add_value_type(args.value_type);
        builder.finish()
    }

    #[inline]
    pub fn value_type(&self) -> ReturnValue {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<ReturnValue>(ReturnValueBox::VT_VALUE_TYPE, Some(ReturnValue::NONE))
                .unwrap()
        }
    }
    #[inline]
    pub fn value(&self) -> flatbuffers::Table<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    ReturnValueBox::VT_VALUE,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlint(&self) -> Option<hlint<'a>> {
        if self.value_type() == ReturnValue::hlint {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlint::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hluint(&self) -> Option<hluint<'a>> {
        if self.value_type() == ReturnValue::hluint {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hluint::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hllong(&self) -> Option<hllong<'a>> {
        if self.value_type() == ReturnValue::hllong {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hllong::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlulong(&self) -> Option<hlulong<'a>> {
        if self.value_type() == ReturnValue::hlulong {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlulong::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlfloat(&self) -> Option<hlfloat<'a>> {
        if self.value_type() == ReturnValue::hlfloat {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlfloat::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hldouble(&self) -> Option<hldouble<'a>> {
        if self.value_type() == ReturnValue::hldouble {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hldouble::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlstring(&self) -> Option<hlstring<'a>> {
        if self.value_type() == ReturnValue::hlstring {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlstring::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlbool(&self) -> Option<hlbool<'a>> {
        if self.value_type() == ReturnValue::hlbool {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlbool::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlvoid(&self) -> Option<hlvoid<'a>> {
        if self.value_type() == ReturnValue::hlvoid {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlvoid::init_from_table(u) })
        } else {
            None
        }
    }

    #[inline]
    #[allow(non_snake_case)]
    pub fn value_as_hlsizeprefixedbuffer(&self) -> Option<hlsizeprefixedbuffer<'a>> {
        if self.value_type() == ReturnValue::hlsizeprefixedbuffer {
            let u = self.value();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid union in this slot
            Some(unsafe { hlsizeprefixedbuffer::init_from_table(u) })
        } else {
            None
        }
    }
}

impl flatbuffers::Verifiable for ReturnValueBox<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_union::<ReturnValue, _>(
                "value_type",
                Self::VT_VALUE_TYPE,
                "value",
                Self::VT_VALUE,
                true,
                |key, v, pos| match key {
                    ReturnValue::hlint => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlint>>(
                            "ReturnValue::hlint",
                            pos,
                        ),
                    ReturnValue::hluint => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hluint>>(
                            "ReturnValue::hluint",
                            pos,
                        ),
                    ReturnValue::hllong => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hllong>>(
                            "ReturnValue::hllong",
                            pos,
                        ),
                    ReturnValue::hlulong => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlulong>>(
                            "ReturnValue::hlulong",
                            pos,
                        ),
                    ReturnValue::hlfloat => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlfloat>>(
                            "ReturnValue::hlfloat",
                            pos,
                        ),
                    ReturnValue::hldouble => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hldouble>>(
                            "ReturnValue::hldouble",
                            pos,
                        ),
                    ReturnValue::hlstring => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlstring>>(
                            "ReturnValue::hlstring",
                            pos,
                        ),
                    ReturnValue::hlbool => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlbool>>(
                            "ReturnValue::hlbool",
                            pos,
                        ),
                    ReturnValue::hlvoid => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlvoid>>(
                            "ReturnValue::hlvoid",
                            pos,
                        ),
                    ReturnValue::hlsizeprefixedbuffer => v
                        .verify_union_variant::<flatbuffers::ForwardsUOffset<hlsizeprefixedbuffer>>(
                            "ReturnValue::hlsizeprefixedbuffer",
                            pos,
                        ),
                    _ => Ok(()),
                },
            )?
            .finish();
        Ok(())
    }
}
pub struct ReturnValueBoxArgs {
    pub value_type: ReturnValue,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ReturnValueBoxArgs {
    #[inline]
    fn default() -> Self {
        ReturnValueBoxArgs {
            value_type: ReturnValue::NONE,
            value: None, // required field
        }
    }
}

pub struct ReturnValueBoxBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ReturnValueBoxBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_value_type(&mut self, value_type: ReturnValue) {
        self.fbb_.push_slot::<ReturnValue>(
            ReturnValueBox::VT_VALUE_TYPE,
            value_type,
            ReturnValue::NONE,
        );
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(ReturnValueBox::VT_VALUE, value);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> ReturnValueBoxBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        ReturnValueBoxBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ReturnValueBox<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, ReturnValueBox::VT_VALUE, "value");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for ReturnValueBox<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("ReturnValueBox");
        ds.field("value_type", &self.value_type());
        match self.value_type() {
            ReturnValue::hlint => {
                if let Some(x) = self.value_as_hlint() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hluint => {
                if let Some(x) = self.value_as_hluint() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hllong => {
                if let Some(x) = self.value_as_hllong() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlulong => {
                if let Some(x) = self.value_as_hlulong() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlfloat => {
                if let Some(x) = self.value_as_hlfloat() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hldouble => {
                if let Some(x) = self.value_as_hldouble() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlstring => {
                if let Some(x) = self.value_as_hlstring() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlbool => {
                if let Some(x) = self.value_as_hlbool() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlvoid => {
                if let Some(x) = self.value_as_hlvoid() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            ReturnValue::hlsizeprefixedbuffer => {
                if let Some(x) = self.value_as_hlsizeprefixedbuffer() {
                    ds.field("value", &x)
                } else {
                    ds.field(
                        "value",
                        &"InvalidFlatbuffer: Union discriminant does not match value.",
                    )
                }
            }
            _ => {
                let x: Option<()> = None;
                ds.field("value", &x)
            }
        };
        ds.finish()
    }
}
