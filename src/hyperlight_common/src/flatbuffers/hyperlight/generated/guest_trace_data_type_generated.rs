// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;

use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GuestTraceDataTypeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GuestTraceDataType<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GuestTraceDataType<'a> {
    type Inner = GuestTraceDataType<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> GuestTraceDataType<'a> {
    pub const VT_START_TSC: flatbuffers::VOffsetT = 4;
    pub const VT_EVENTS: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        GuestTraceDataType { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args GuestTraceDataTypeArgs<'args>,
    ) -> flatbuffers::WIPOffset<GuestTraceDataType<'bldr>> {
        let mut builder = GuestTraceDataTypeBuilder::new(_fbb);
        builder.add_start_tsc(args.start_tsc);
        if let Some(x) = args.events {
            builder.add_events(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn start_tsc(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(GuestTraceDataType::VT_START_TSC, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn events(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GuestEventEnvelopeType<'a>>>>
    {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GuestEventEnvelopeType>>,
            >>(GuestTraceDataType::VT_EVENTS, None)
        }
    }
}

impl flatbuffers::Verifiable for GuestTraceDataType<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>("start_tsc", Self::VT_START_TSC, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<GuestEventEnvelopeType>>,
            >>("events", Self::VT_EVENTS, false)?
            .finish();
        Ok(())
    }
}
pub struct GuestTraceDataTypeArgs<'a> {
    pub start_tsc: u64,
    pub events: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GuestEventEnvelopeType<'a>>>,
        >,
    >,
}
impl<'a> Default for GuestTraceDataTypeArgs<'a> {
    #[inline]
    fn default() -> Self {
        GuestTraceDataTypeArgs {
            start_tsc: 0,
            events: None,
        }
    }
}

pub struct GuestTraceDataTypeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GuestTraceDataTypeBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_start_tsc(&mut self, start_tsc: u64) {
        self.fbb_
            .push_slot::<u64>(GuestTraceDataType::VT_START_TSC, start_tsc, 0);
    }
    #[inline]
    pub fn add_events(
        &mut self,
        events: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<GuestEventEnvelopeType<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(GuestTraceDataType::VT_EVENTS, events);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> GuestTraceDataTypeBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        GuestTraceDataTypeBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<GuestTraceDataType<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for GuestTraceDataType<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("GuestTraceDataType");
        ds.field("start_tsc", &self.start_tsc());
        ds.field("events", &self.events());
        ds.finish()
    }
}
